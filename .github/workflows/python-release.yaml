name: Publish - PyPI
# This workflow builds and publishes the Python package to PyPI and TestPyPI
# when a new release is published.
# It builds the package for multiple Python versions and platforms, including
# Windows, macOS, and Linux. Conda-forge listens to new PyPI releases and begins
# a workflow for constructing the conda release for this version.

on:
  release:
    types: [published]

jobs:
  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python-version:
          - "10"
          - "11"
          - "12"
          - "13"
          - "14"
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: set up rust
        if: matrix.os != 'ubuntu'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: add mac rust target
        run: rustup target add aarch64-apple-darwin x86_64-apple-darwin
        if: matrix.os == 'macos'

      - name: add mac cargo config options
        run: |
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml <<EOF
          [target.x86_64-apple-darwin]
          rustflags = ["-C", "link-args=-Wl,-undefined,dynamic_lookup"]

          [target.aarch64-apple-darwin]
          rustflags = ["-C", "link-args=-Wl,-undefined,dynamic_lookup"]
          EOF
        if: runner.os == 'macos'

      - name: run cargo tests
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: cd rust/ && cargo test

      - name: install python dependencies
        run: pip install -U maturin wheel twine cibuildwheel

      - name: build sdist
        if: matrix.os == 'ubuntu' && matrix.python-version == '11'
        run: |
          pip install -U maturin
          maturin build --sdist --out dist/

      - name: build ${{ matrix.platform || matrix.os }} binaries
        run: cibuildwheel --output-dir dist
        env:
          # 2025-01-02: cpython 3.11 requires Mac OS 10.12 at minimum
          MACOSX_DEPLOYMENT_TARGET: 10.12

          # CI Build Wheel Arguments
          CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
          CIBW_SKIP: "*-win32 *-musllinux* *i686 *ppc64le *s390x *aarch64"
          CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_BEFORE_BUILD: >
            pip install -U maturin &&
            rustup default stable &&
            rustup show
          CIBW_BEFORE_BUILD_LINUX: >
            pip install -U setuptools-rust &&
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y &&
            rustup show

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "wheel-${{ matrix.os }}-py${{ matrix.python-version }}"
          path: dist
  upload-to-testpypi:
    needs: build
    name: Upload release to Test PyPI
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/project/nrel.routee.compass
    permissions:
      id-token: write
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist/
          pattern: wheel*

      - run: ls -1 dist/

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@unstable/v1
        with:
          verbose: true

  upload-to-pypi:
    needs: [build, upload-to-testpypi]
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/nrel.routee.compass
    permissions:
      id-token: write
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist/
          pattern: wheel*

      - run: ls -1 dist/

      - name: publish package to PyPI
        uses: pypa/gh-action-pypi-publish@unstable/v1
        with:
          verbose: true
