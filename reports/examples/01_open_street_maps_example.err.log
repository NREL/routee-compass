Traceback (most recent call last):
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/test/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

generate_compass_dataset(g, output_directory="denver_co")



------------------

----- stderr -----
INFO:nrel.routee.compass.io.generate_dataset:running pipeline import with phases: [['GRAPH', 'CONFIG', 'POWERTRAIN', 'CHARGING_STATIONS']]
----- stderr -----
INFO:nrel.routee.compass.io.generate_dataset:processing graph topology and speeds
----- stderr -----
INFO:nrel.routee.compass.io.generate_dataset:adding grade information
----- stderr -----
INFO:nrel.routee.compass.io.utils:downloading n40w105
----- stderr -----
INFO:nrel.routee.compass.io.utils:downloading n40w106
------------------

[31m---------------------------------------------------------------------------[39m
[31mImportError[39m                               Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [43mgenerate_compass_dataset[49m[43m([49m[43mg[49m[43m,[49m[43m [49m[43moutput_directory[49m[43m=[49m[33;43m"[39;49m[33;43mdenver_co[39;49m[33;43m"[39;49m[43m)[49m

[36mFile [39m[32m/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nrel/routee/compass/io/generate_dataset.py:113[39m, in [36mgenerate_compass_dataset[39m[34m(g, output_directory, hwy_speeds, fallback, agg, phases, raster_resolution_arc_seconds, default_config, requests_kwds, afdc_api_key)[39m
[32m    111[39m [38;5;28;01mif[39;00m GeneratePipelinePhase.POWERTRAIN [38;5;129;01min[39;00m phases:
[32m    112[39m     log.info([33m"[39m[33madding grade information[39m[33m"[39m)
[32m--> [39m[32m113[39m     g1 = [43madd_grade_to_graph[49m[43m([49m
[32m    114[39m [43m        [49m[43mg1[49m[43m,[49m[43m [49m[43mresolution_arc_seconds[49m[43m=[49m[43mraster_resolution_arc_seconds[49m
[32m    115[39m [43m    [49m[43m)[49m
[32m    117[39m v, e = ox.graph_to_gdfs(g1)
[32m    119[39m [38;5;66;03m# process vertices[39;00m

[36mFile [39m[32m/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nrel/routee/compass/io/utils.py:192[39m, in [36madd_grade_to_graph[39m[34m(g, output_dir, resolution_arc_seconds, api_key)[39m
[32m    189[39m     [38;5;28;01melse[39;00m:
[32m    190[39m         filepath = files
[32m--> [39m[32m192[39m     g = [43mox[49m[43m.[49m[43madd_node_elevations_raster[49m[43m([49m[43mg[49m[43m,[49m[43m [49m[43mfilepath[49m[43m)[49m
[32m    193[39m [38;5;28;01melse[39;00m:
[32m    194[39m     g = ox.add_node_elevations_google(g, api_key=api_key)

[36mFile [39m[32m/usr/share/miniconda/envs/test/lib/python3.11/site-packages/osmnx/elevation.py:179[39m, in [36madd_node_elevations_raster[39m[34m(G, filepath, band, cpus)[39m
[32m    177[39m [38;5;28;01mif[39;00m rasterio [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:  [38;5;66;03m# pragma: no cover[39;00m
[32m    178[39m     msg = [33m"[39m[33mrasterio must be installed as an optional dependency to query rasters.[39m[33m"[39m
[32m--> [39m[32m179[39m     [38;5;28;01mraise[39;00m [38;5;167;01mImportError[39;00m(msg)
[32m    181[39m [38;5;66;03m# if multiple filepaths are passed in, compose them as a virtual raster[39;00m
[32m    182[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(filepath, ([38;5;28mstr[39m, Path)):

[31mImportError[39m: rasterio must be installed as an optional dependency to query rasters.

